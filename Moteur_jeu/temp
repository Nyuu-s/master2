/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtCore module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** "Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include "geometryengine.h"

#include <iostream>

#include <QVector2D>
#include <QVector3D>


//! [0]
GeometryEngine::GeometryEngine()
    : indexBuf(QOpenGLBuffer::IndexBuffer)
{
    initializeOpenGLFunctions();

    // Generate 2 VBOs
    arrayBuf.create();
    indexBuf.create();

    // Initializes cube geometry and transfers it to VBOs
    initCubeGeometry(16,16);

}

GeometryEngine::~GeometryEngine()
{
    arrayBuf.destroy();
    indexBuf.destroy();
}
//! [0]
//!
void GeometryEngine::subdivisePlan(int x, int y, VertexData vertices[],GLushort indices[], float Xmin=-1,float Ymin=-1,float Xmax=1,float Ymax=1)
{
    float intervalX_Texture=2/(float)(x-1);
    float intervalY_Texture=2/(float)(y-1);

   float intervalX=(Xmax-Xmin)/(float)(x-1);
   float intervalY=(Ymax-Ymin)/(float)(y-1);
   for(int i=0; i<x; i++){
        for(int j=0;j<y; j++){
            qDebug("%f %f",Xmin+intervalX*i, Ymin+intervalY*j);
           // vertices[i*y+j]= {QVector3D(Xmin+intervalX*i, Ymin+intervalY*j, static_cast<float> (rand()) / static_cast<float> (RAND_MAX) ), QVector2D((intervalX_Texture*i)/2, (intervalY_Texture*j)/2)};
            vertices[i*y+j]= {QVector3D(Xmin+intervalX*i, Ymin+intervalY*j,0.0f ), QVector2D((intervalX_Texture*i)/2, (intervalY_Texture*j)/2)};

       }
   }
   for(int i=0; i<x-1; i++){
        for(int j=0;j<y; j++){
                //qDebug("triangle %i, %i",i*y+j,(i+1)*y+j );
            qDebug("indices %i, %i",2*i+i*(y*2)+j*2,2*i+i*(y*2)+j*2+1 );
                indices[2*i+i*(y*2)+j*2] = i*y+j;
                indices[2*i+i*(y*2)+j*2+1] = (i+1)*y+j;
              //  indices[i*y+j*3+2] = i*y+j+1;
            }
            //ajout triangle degenerer
         //qDebug("triangle degenerer %i, %i",(i+1)*y+y-1,(i+1)*y );
    //    if(i!=(x-2)){
        qDebug("indices degenerer %i, %i",2*i+i*(y*2)+y*2,2*i+i*(y*2)+y*2+1 );
            indices[2*i+i*(y*2)+y*2]=(i+1)*y+y-1;
            indices[2*i+i*(y*2)+y*2+1]=(i+1)*y;
    //    }
     /*   if(i==(x-2))
        {
            qDebug("indices finale %i",2*i+i*(y*2)+y*2 );
            //indices[2*i+i*(y*2)+y*2]= (i+1)*y+y-1+1;
           // indices[2*i+i*(y*2)+y*2+1]=(i+1)*y+y-1;
           // indices[2*i+i*(y*2)+y*2+2]=(i+1)*y+y-1;
}*/

        }
        //indices[(i+1)*y+i] = (i+1)*y-1;
   for(int i=0; i<(x*y+y*(x-2)+2*(x-2)+2); i++)
       qDebug("ahah %i",indices[i]);

}


void GeometryEngine::initCubeGeometry(int nH,int nW)
{
//    float  yStep = (1.0 - (-1.0) / float(nH-1));
//    float  xStep = (1.0 - (-1.0) / float(nW-1));

//    // For cube we would need only 8 vertices but we have to
//    // duplicate vertex for each face because texture coordinate
//    // is different.
//    // Hence 4 vertices per face and 6 faces vertices = 24 vertices
//    unsigned int vertexNumber = nH*nW ;
//    VertexData vertices[vertexNumber];

//    for (int y; y<nH ; y++ ) {
//        for (int x; x<nW ;x++ ) {
//            vertices[y*nH+x].position = QVector3D(-1.0+xStep*y, -1.0+yStep*x, 0.0);
//        }

//    }

//    // Indices for drawing cube faces using triangle strips.
//    // Triangle strips can be connected by duplicating indices
//    // between the strips. If connecting strips have opposite
//    // vertex order then last index of the first strip and first
//    // index of the second strip needs to be duplicated. If
//    // connecting strips have same vertex order then only last
//    // index of the first strip needs to be duplicated.
//    unsigned int indexCount = nW*nH+nH*(nW-2)+2*(nW-2)+2;
//   GLushort indices[indexCount];
//   int e = 0;
//    for (int y; y<nH-1 ; y++ ) {
//        for (int x; x<nW ;x++ ) {
//            indices[2*y+y*(nH*2)+x*2] = y*nH+x;
//            indices[2*y+y*(nH*2)+x*2+1] = (y+1)*nH+x;
//            indices[2*y+y*(nH*2)+nH*2]=(y+1)*nH+nH-1;
//            indices[2*y+y*(nH*2)+nH*2+1]=(y+1)*nH;
//        }

  //  }
    int x=16;
    int y=16;
    unsigned int vertexNumber = x*y ;
    VertexData vertices[vertexNumber];
    unsigned int indexCount = x*y+y*(x-2)+2*(x-2)+2;
    GLushort indices[x*y+y*(x-2)+2*(x-2)+2];
    subdivisePlan(x,  y,  vertices,  indices,-1,-1,1,1);

//! [1]
    // Transfer vertex data to VBO 0
    arrayBuf.bind();
    arrayBuf.allocate(vertices, vertexNumber * sizeof(VertexData));

    // Transfer index data to VBO 1
    indexBuf.bind();
    indexBuf.allocate(indices,  indexCount* sizeof(GLushort));
//! [1]
}

//! [2]
void GeometryEngine::drawCubeGeometry(QOpenGLShaderProgram *program)
{
    // Tell OpenGL which VBOs to use
    arrayBuf.bind();
    indexBuf.bind();

    // Offset for position
    quintptr offset = 0;

    // Tell OpenGL programmable pipeline how to locate vertex position data
    int vertexLocation = program->attributeLocation("a_position");
    program->enableAttributeArray(vertexLocation);
    program->setAttributeBuffer(vertexLocation, GL_FLOAT, offset, 3, sizeof(VertexData));

    // Offset for texture coordinate
    offset += sizeof(QVector3D);

    // Tell OpenGL programmable pipeline how to locate vertex texture coordinate data
    int texcoordLocation = program->attributeLocation("a_texcoord");
    program->enableAttributeArray(texcoordLocation);
    program->setAttributeBuffer(texcoordLocation, GL_FLOAT, offset, 2, sizeof(VertexData));

    // Draw cube geometry using indices from VBO 1
    glDrawElements(GL_TRIANGLE_STRIP, indexBuf.size(), GL_UNSIGNED_SHORT, 0); //Careful update indicesNumber when creating new geometry
}
//! [2]

